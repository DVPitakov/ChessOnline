#ifndef MAINWINDOW_H
#define MAINWINDOW_H
const int BOARD_X = 8;
const int BOARD_Y = 8;
static int counter = 0;
#include <QMainWindow>
#include <QPainter>
#include <QPaintEvent>
#include <QEvent>
#include <QDebug>
#include <bord.h>
#include <QPaintEvent>
#include <QPushButton>
#include <MyNet.h>
#include <MyAudio.h>
#include <QLabel>
#include <QRegExp>
#include <mylabel.h>
#include <mymenue.h>

struct Point {
    int x;
    int y;
    Point(int _x = -1, int _y = -1):x(_x),y(_y) {}
};

class MainWindow : public QWidget
{
    Q_OBJECT

public:
    Bord *bord;
    QPushButton* pushButton;
    QPushButton* recordButton;
    QPushButton* playButton;
    QPushButton* menueButton;
    QAudioInput* audio_in;
    QAudioOutput* audio_out;
    MyMenue* menue;
    MyLabel* Label;
    MyNet *net;
    MainWindow(QWidget *parent = 0);
    bool listen_now;
    QTime timer;
    MyAudio* audio;
    ~MainWindow();
    char getPos(QString str) {
        QRegExp rx("<variant confidence=\"(\\d.\\d\\d)\">([^<]+)</variant>");
        QRegExp rx2("([123456789])");
        char out;
        int pos = 0;
       //QStringList strList;
        QString st;
       // str = str.toUpper();
       // while ((pos = rx.indexIn(str, pos)) != -1) {
            pos = rx.indexIn(str, pos);
            st = rx.cap(2);
            qDebug() << "here" << st;
            if (st[0].unicode() >= 'а' && st[0].unicode() <= 'з') {
                out = st[0].unicode() - 'а';
                rx2.indexIn(st, 0);
                out += ((rx2.cap(1)[0].unicode() - '1') << 3);
                Label->addLast("block_1 identifed symbol");
             }
           else if (st[0].unicode() >= 1072 && st[0].unicode() < 1080) {
               out = st[0].unicode() - 1072;
               rx2.indexIn(st, 0);
               out += ((rx2.cap(1)[0].unicode() - 49) << 3);
               Label->addLast("block_2 identifed symbol");
            }
            else {
                qDebug() << st[0];
                Label->addLast("symbol did not identifed");
                Label->addLast(QString::number(st[0].unicode()));
                Label->addLast(QString::number(out));
            }
           // pos += rx.matchedLength();
        //}
            return out;
        }
    void paintEvent(QPaintEvent* event) {
        bord->setGeometry(0,0,width(),height()*0.9);
        recordButton->setGeometry(0, height() * 0.91, width()*0.3,height() * 0.09);
        playButton->setGeometry(width()* 0.31, height() * 0.91, width()*0.3, height() * 0.09);
        menueButton->setGeometry(width() * 0.62, height() * 0.91, width()*0.3, height() * 0.09);
        menue->setGeometry(width() * 0.05 ,height() * 0.05, width()*0.9, height() * 0.9);
    }
    void keyPressEvent(QKeyEvent* event) {

    }

signals:
    voiceEvent(char);
public slots:
    void listen_audio()
    {
        playButton->setEnabled(listen_now);
        if (listen_now)
        {
            qDebug() << timer.elapsed();
            audio->stopRecoding();
            recordButton->setText("Записать");
            net->vtos(audio->data(), Label);

        }
        else
        {
            timer = QTime::currentTime();
            audio->listen();
            recordButton->setText("Остановть");
        }
        listen_now = !listen_now;
    }
    void play_audio()
    {
        audio->play();
        qDebug()<<"Ready"<<endl;
    }

    char oldPos;
    void startParse(QString str) {
       char point;
       point = getPos(str);
       emit voiceEvent(point);

    }
};

#endif // MAINWINDOW_H
